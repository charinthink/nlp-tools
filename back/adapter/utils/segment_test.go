package utils

import (
	"reflect"
	"testing"
)

func TestSegmentationWithUnknownWords(t *testing.T) {
	segmentation, _ := NewSegmentation("../../../data/dict/th/th_corpus.txt")
	tests := []struct {
		name     string
		sentence string
		want     []string
	}{
		{
			name:     "sentence with unknown words",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µà¸„à¸£à¸±à¸šà¸œà¸¡à¸Šà¸·à¹ˆà¸­XXX",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸šà¸œà¸¡", "à¸Šà¸·à¹ˆà¸­"},
		},
		{
			name:     "sentence with punctuation",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µ,à¸„à¸£à¸±à¸š!",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "empty string",
			sentence: "",
			want:     []string{},
		},
		{
			name:     "sentence with numbers",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µ123à¸„à¸£à¸±à¸š",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "sentence with mixed characters",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µ@à¸„à¸£à¸±à¸š",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "sentence with emojis",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µðŸ˜Šà¸„à¸£à¸±à¸š",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "sentence with special characters",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µ#à¸„à¸£à¸±à¸š",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "sentence with hyphen",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µ-à¸„à¸£à¸±à¸š",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "sentence with multiple spaces",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µ  à¸„à¸£à¸±à¸š",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "sentence with newline",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µ\nà¸„à¸£à¸±à¸š",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "sentence with tab",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µ\tà¸„à¸£à¸±à¸š",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "sentence with mixed languages",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µhelloà¸„à¸£à¸±à¸š",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "sentence with repeated words",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µà¸ªà¸§à¸±à¸ªà¸”à¸µà¸„à¸£à¸±à¸š",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
		{
			name:     "sentence with long unknown word",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µà¸„à¸£à¸±à¸šà¸œà¸¡à¸Šà¸·à¹ˆà¸­XXXXXXXXXXXXXXXXXXXX",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸šà¸œà¸¡", "à¸Šà¸·à¹ˆà¸­"},
		},
		{
			name:     "sentence with mixed punctuation",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µ,à¸„à¸£à¸±à¸š!à¸œà¸¡à¸Šà¸·à¹ˆà¸­.",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸šà¸œà¸¡", "à¸Šà¸·à¹ˆà¸­"},
		},
		{
			name:     "sentence with trailing spaces",
			sentence: "à¸ªà¸§à¸±à¸ªà¸”à¸µà¸„à¸£à¸±à¸š   ",
			want:     []string{"à¸ªà¸§à¸±à¸ªà¸”à¸µ", "à¸„à¸£à¸±à¸š"},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := segmentation.Segmentation(tt.sentence)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Segmentation() = %v, want %v", got, tt.want)
			}
		})
	}
}